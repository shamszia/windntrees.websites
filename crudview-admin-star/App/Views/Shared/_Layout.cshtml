@using Microsoft.AspNetCore.Http;
@using Microsoft.Extensions.Options;
@using Microsoft.Extensions.Localization;
@using SharedLibrary.Core.Resources.Global;

@inject IOptions<Application.Core.Models.Configuration.ApplicationSettings> ApplicationSettings

@inject IStringLocalizer<FormMessages> FormMessages
@inject IStringLocalizer<StandardMessages> StandardMessages
@inject IStringLocalizer<KOMessages> KOMessages
@inject IStringLocalizer<ValidationMessages> ValidationMessages

@{
    Layout = null;

    var theme = @ApplicationSettings.Value.theme;

    if (string.IsNullOrEmpty(theme))
    {
        theme = "native";
    }
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="Shams Zia">

    <!-- New Age -->
    <link rel="icon" type="image/x-icon" href="/assets/favicon.ico" />
    <!-- Bootstrap icons-->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css" rel="stylesheet" />
    <!-- Google fonts-->
    <link rel="preconnect" href="https://fonts.gstatic.com" />
    <link href="https://fonts.googleapis.com/css2?family=Newsreader:ital,wght@0,600;1,600&amp;display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Mulish:ital,wght@0,300;0,500;0,600;0,700;1,300;1,500;1,600;1,700&amp;display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Kanit:ital,wght@0,400;1,400&amp;display=swap" rel="stylesheet" />
    <!-- Core theme CSS (includes Bootstrap)-->
    <link href="/css/styles.css" rel="stylesheet" />
    <link href="/css/newage.css" rel="stylesheet" />
    
    <!-- New Age END-->

    <link rel="icon" href="@Url.Content("~/content/images/favicon.png")">

    @if (IsSectionDefined("Header"))
    {
        @RenderSection("Header", required: false)
    }
    else
    {
        <title></title>
    }

</head>
<body dir="@Context.Session.GetString("bodyDirection")">

    @await Html.PartialAsync("_Header")


    @if (IsSectionDefined("PagePath"))
    {
        @RenderSection("PagePath", required: false)
    }
    else
    {
        @Html.Raw(WindnTrees.Controls.Standard.Bootstrap.Navbar.NavigationComposer.composePathNavigation(Context.Request.Path))
    }

    @if (IsSectionDefined("Authorization"))
    {
        @RenderSection("Authorization", required: false)
    }
    else
    {
        @Html.AntiForgeryToken()
    }

    @if (IsSectionDefined("ContentHeader"))
    {
        @RenderSection("ContentHeader", required: false)
    }

    @RenderBody()

    @if (IsSectionDefined("ContentFooter"))
    {
        @RenderSection("ContentFooter", required: false)
    }
    else
    {
        @await Html.PartialAsync("_Footer")
    }

    @await Html.PartialAsync("_Copyright")

    <!-- JAVASCRIPTS -->

    <script src="~/lib/jquery/dist/jquery.js" type="text/javascript"></script>
    <script src="~/lib/jquery.form/jquery.form.js" type="text/javascript"></script>
    <script src="~/lib/jquery.ui/jquery-ui-1.12.1.min.js" type="text/javascript"></script>
    <script src="~/lib/datejs.js" type="text/javascript"></script>
    <script src="~/lib/bootstrap-5.2.3-dist/js/bootstrap.bundle.min.js" type="text/javascript"></script>
    <script src="~/lib/underscore.js" type="text/javascript"></script>
    <script src="~/lib/moment.min.js" type="text/javascript"></script>
    <script src="~/lib/bootstrap-datepicker.js" type="text/javascript"></script>
    <script src="~/lib/bootstrap-timepicker.js" type="text/javascript"></script>
    <script src="~/lib/knockoutjs/knockout-3.4.2.js" type="text/javascript"></script>
    <script src="~/lib/knockoutjs.validation/knockout.validation.min.js" type="text/javascript"></script>
    <script src="~/lib/windntrees-135.min.js" type="text/javascript"></script>

    <script type="text/javascript">

        function reformUniCodeString(options) {
            var instance = this;
            options = (options !== null && options !== undefined) ? options : {};

            instance.formatString = function (value) {

                if (value.startsWith("&#x")) {

                    //&#x6CC;&#x6C1; &#x62E;&#x627;&#x646;&#x6C1;
                    var formattedString = value;

                    //formats ' ' with unicode equivalent
                    formattedString = formattedString.replace(/ /gi, "&#x020;");

                    //formats &#x6CC in 0x6CC
                    formattedString = formattedString.replace(/&#/gi, "0");
                    //formats &#x6CC;&#x6C1; in 0x6CC,0x6C1,
                    formattedString = formattedString.replace(/;/gi, ",");
                    //removes 0x6CC,0x6C1, last ',' as 0x6CC,0x6C1
                    formattedString = formattedString.substr(0, formattedString.length - 1);

                    //resultant formatted string shoule be
                    //0x6CC,0x6C1,0x020,0x62E,0x627,0x646,0x6C1
                    var uniCodeStrings = formattedString.split(',');
                    var uniCodes = [];

                    for (var i = 0; i < uniCodeStrings.length; i++) {

                        uniCodes.push(parseInt(uniCodeStrings[i]));
                    }

                    formattedString = String.fromCharCode.apply(this, uniCodes);

                    return formattedString;
                }

                return value;
            };

            if (options.StringType !== null && options.StringType !== undefined) {

                if (options.StringType === "&#;") {

                    return instance.formatString(options.value);
                }
            }
            else {
                //&#;

                return instance.formatString(options);
            }
        }

        function intialize(repository) {

            ko.validation.init({
                insertMessages: false,
                decorateElement: true,
                errorElementClass: 'error'
            });

            ko.validation.rules['required'].message = reformUniCodeString('@KOMessages["Required"]');
            ko.validation.rules['min'].message = reformUniCodeString('@KOMessages["Min"]');
            ko.validation.rules['max'].message = reformUniCodeString('@KOMessages["Max"]');
            ko.validation.rules['minLength'].message = reformUniCodeString('@KOMessages["MinLength"]');
            ko.validation.rules['maxLength'].message = reformUniCodeString('@KOMessages["MaxLength"]');
            ko.validation.rules['pattern'].message = reformUniCodeString('@KOMessages["Pattern"]');
            ko.validation.rules['step'].message = reformUniCodeString('@KOMessages["Step"]');
            ko.validation.rules['email'].message = reformUniCodeString('@KOMessages["Email"]');
            ko.validation.rules['date'].message = reformUniCodeString('@KOMessages["Date"]');
            ko.validation.rules['dateISO'].message = reformUniCodeString('@KOMessages["DateISO"]');
            ko.validation.rules['number'].message = reformUniCodeString('@KOMessages["Number"]');
            ko.validation.rules['digit'].message = reformUniCodeString('@KOMessages["Digit"]');
            ko.validation.rules['phoneUS'].message = reformUniCodeString('@KOMessages["PhoneUS"]');
            ko.validation.rules['equal'].message = reformUniCodeString('@KOMessages["Equal"]');
            ko.validation.rules['notEqual'].message = reformUniCodeString('@KOMessages["NotEqual"]');

            ko.validation.registerExtenders();

            repository.clean();
            repository.add(new LocaleMessage("form.new.text", reformUniCodeString('@FormMessages["New"]')));
            repository.add(new LocaleMessage("form.edit.text", reformUniCodeString('@FormMessages["Edit"]')));
            repository.add(new LocaleMessage("form.noRecord.text", reformUniCodeString('@FormMessages["NoRecord"]')));
            repository.add(new LocaleMessage("form.found.text", reformUniCodeString('@FormMessages["Found"]')));
            repository.add(new LocaleMessage("form.records.text", reformUniCodeString('@FormMessages["Records"]')));
            repository.add(new LocaleMessage("form.saved.text", reformUniCodeString('@FormMessages["Saved"]')));
            repository.add(new LocaleMessage("form.failed.text", reformUniCodeString('@FormMessages["Failed"]')));
            repository.add(new LocaleMessage("form.displayingPage.text", reformUniCodeString('@FormMessages["DisplayingPage"]')));
            repository.add(new LocaleMessage("form.of.text", reformUniCodeString('@FormMessages["Of"]')));
            repository.add(new LocaleMessage("form.totalPages.text", reformUniCodeString('@FormMessages["TotalPages"]')));
            repository.add(new LocaleMessage("form.ok.text", reformUniCodeString('@FormMessages["Ok"]')));
            repository.add(new LocaleMessage("standard.alertSure.text", reformUniCodeString('@StandardMessages["AlertSure"]')));
            repository.add(new LocaleMessage("standard.processing.text", reformUniCodeString('@StandardMessages["Processing"]')));
            repository.add(new LocaleMessage("standard.err.text", reformUniCodeString('@StandardMessages["Err"]')));
            repository.add(new LocaleMessage("standard.ok.text", reformUniCodeString('@StandardMessages["Ok"]')));
            repository.add(new LocaleMessage("standard.listloadok.text", reformUniCodeString('@StandardMessages["ListLoadOk"]')));
            repository.add(new LocaleMessage("standard.listloaderr.text", reformUniCodeString('@StandardMessages["ListLoadErr"]')));

            return repository;
        }
    </script>

    @if (IsSectionDefined("Scripts"))
    {
        @RenderSection("Scripts", required: false)
    }
</body>
</html>
@using Microsoft.AspNetCore.Http;
@using Microsoft.Extensions.Options;
@using Microsoft.Extensions.Localization;
@using SharedLibrary.Core.Resources.Global;

@inject IOptions<Application.Core.Models.Configuration.ApplicationSettings> ApplicationSettings

@inject IStringLocalizer<FormMessages> FormMessages
@inject IStringLocalizer<StandardMessages> StandardMessages
@inject IStringLocalizer<KOMessages> KOMessages
@inject IStringLocalizer<ValidationMessages> ValidationMessages

@{
    Layout = null;

    var theme = @ApplicationSettings.Value.theme;

    if (string.IsNullOrEmpty(theme))
    {
        theme = "native";
    }
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="Shams Zia">

    <link rel="icon" href="@Url.Content("~/favicon.ico")">

    <link href="~/fonts/fontawesome-webfont.eot" />
    <link href="~/fonts/fontawesome-webfont.svg" />
    <link href="~/fonts/fontawesome-webfont.ttf" />
    <link href="~/fonts/fontawesome-webfont.woff" />
    <link href="~/fonts/fontawesome-webfont.woff2" />
    <link href="~/fonts/glyphicons-halflings-regular.eot" />
    <link href="~/fonts/glyphicons-halflings-regular.svg" />
    <link href="~/fonts/glyphicons-halflings-regular.ttf" />
    <link href="~/fonts/glyphicons-halflings-regular.woff" />
    <link href="~/fonts/glyphicons-halflings-regular.woff2" />
    <link href="~/fonts/LibreBarcode39ExtendedText-Regular.ttf" />

    <link rel="stylesheet" href="~/css/jquery-ui.min.css" />
    <link rel="stylesheet" href="~/css/jquery-ui.structure.min.css" />
    <link rel="stylesheet" href="~/css/jquery-ui.theme.min.css" />
    <link rel="stylesheet" href="~/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/extensions/font-awesome.min.css" />
    <link rel="stylesheet" href="~/css/extensions/datepicker3.css" />

    <link rel="stylesheet" href="~/css/extensions/native-carousel.css" />
    <link rel="stylesheet" href="~/css/extensions/native-styles.css" />

    <script type="text/javascript" src="~/lib/respond.min.js"></script>
    <script type="text/javascript" src="~/lib/modernizr-2.8.3.js"></script>

    <link rel="shortcut icon" href="@Url.Content("~/content/images/favicon.png")">

    @if (IsSectionDefined("Header"))
    {
        @RenderSection("Header", required: false)
    }
    else
    {
        <title></title>
    }

</head>
<body dir="@Context.Session.GetString("bodyDirection")">

    <!-- basic views -->
    <script type="text/html" id="request_progress">
        <div class="progress-bar" role="progressbar" data-bind="attr: { style: ('width: ' + RequestProgress()  + '%;'), 'aria-valuenow': (&quot; + RequestProgress() + &quot;) }" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"><span data-bind="text: RequestProgress()"></span></div>
    </script>

    <script type="text/html" id="results_processing">
        <span class="d-flex justify-content-end">
            <i class="fa fa-cog fa-spin" data-bind="visible: Processing()"></i>
        </span>
    </script>

    <script type="text/html" id="results_messages">
        <span class="alert d-flex justify-content-start" data-bind="if: ResultMessage().length > 0">
            <span data-bind="text: ResultMessage"></span>
        </span>
    </script>

    <script type="text/html" id="form_processing">
        <span class="d-flex justify-content-end">
            <i class="fa fa-cog fa-spin" data-bind="visible: FormProcessing()"></i>
        </span>
    </script>

    <script type="text/html" id="form_messages">
        <span class="alert d-flex justify-content-start" data-bind="if: FormResultMessage().length > 0">
            <span data-bind="text: FormResultMessage"></span>
        </span>
    </script>

    <script type="text/html" id="list_results_messages">
        <span class="d-flex justify-content-start" data-bind="if: ResultMessage().length > 0">
            <span data-bind="text: ResultMessage"></span>
        </span>
    </script>

    <script type="text/html" id="list_error_messages">
        <li class="alert alert-danger"><span data-bind="text: errField"></span> <span data-bind="text: errMessage"></span></li>
    </script>

    @RenderBody()

    <!-- JAVASCRIPTS -->

    <script src="~/lib/jquery/dist/jquery.js" type="text/javascript"></script>
    <script src="~/lib/jquery.form/jquery.form.js" type="text/javascript"></script>
    <script src="~/lib/jquery.ui/jquery-ui-1.12.1.min.js" type="text/javascript"></script>
    <script src="~/lib/datejs.js" type="text/javascript"></script>
    <script src="~/lib/umd/popper.min.js" type="text/javascript"></script>
    <script src="~/lib/umd/popper-utils.min.js" type="text/javascript"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.min.js" type="text/javascript"></script>
    <script src="~/lib/underscore.js" type="text/javascript"></script>
    <script src="~/lib/moment.min.js" type="text/javascript"></script>
    <script src="~/lib/bootstrap-datepicker.js" type="text/javascript"></script>
    <script src="~/lib/bootstrap-timepicker.js" type="text/javascript"></script>
    <script src="~/lib/knockoutjs/knockout-3.4.2.js" type="text/javascript"></script>
    <script src="~/lib/knockoutjs.validation/knockout.validation.min.js" type="text/javascript"></script>
    <script src="~/lib/windntrees-135.min.js" type="text/javascript"></script>

    <script type="text/javascript">

        function reformUniCodeString(options) {
            var instance = this;
            options = (options !== null && options !== undefined) ? options : {};

            instance.formatString = function (value) {

                if (value.startsWith("&#x")) {

                    //&#x6CC;&#x6C1; &#x62E;&#x627;&#x646;&#x6C1;
                    var formattedString = value;

                    //formats ' ' with unicode equivalent
                    formattedString = formattedString.replace(/ /gi, "&#x020;");

                    //formats &#x6CC in 0x6CC
                    formattedString = formattedString.replace(/&#/gi, "0");
                    //formats &#x6CC;&#x6C1; in 0x6CC,0x6C1,
                    formattedString = formattedString.replace(/;/gi, ",");
                    //removes 0x6CC,0x6C1, last ',' as 0x6CC,0x6C1
                    formattedString = formattedString.substr(0, formattedString.length - 1);

                    //resultant formatted string shoule be
                    //0x6CC,0x6C1,0x020,0x62E,0x627,0x646,0x6C1
                    var uniCodeStrings = formattedString.split(',');
                    var uniCodes = [];

                    for (var i = 0; i < uniCodeStrings.length; i++) {

                        uniCodes.push(parseInt(uniCodeStrings[i]));
                    }

                    formattedString = String.fromCharCode.apply(this, uniCodes);

                    return formattedString;
                }

                return value;
            };

            if (options.StringType !== null && options.StringType !== undefined) {

                if (options.StringType === "&#;") {

                    return instance.formatString(options.value);
                }
            }
            else {
                //&#;

                return instance.formatString(options);
            }
        }

        function getDataMembersObject(dataObject, dataMembers, dataMembersTitle) {

            var downloadDataObject = {};

            for (var i = 0; i < dataMembers.length; i++) {
                if (dataMembers[i] === "Particulars") {

                    downloadDataObject[dataMembersTitle[i]] = ((dataObject[dataMembers[i]]).replace(/,/gi, "")).replace(/'/gi, "");
                }
                else if (dataMembers[i] === "Title") {

                    downloadDataObject[dataMembersTitle[i]] = ((dataObject[dataMembers[i]]).replace(/,/gi, "")).replace(/'/gi, "");
                }
                else if (dataMembers[i] === "Note") {

                    downloadDataObject[dataMembersTitle[i]] = ((dataObject[dataMembers[i]]).replace(/,/gi, "")).replace(/'/gi, "");
                }
                else if (dataMembers[i] === "ExpenseTitle") {

                    downloadDataObject[dataMembersTitle[i]] = ((dataObject[dataMembers[i]]).replace(/,/gi, "")).replace(/'/gi, "");
                }
                else if (dataMembers[i] === "PlaceName") {

                    downloadDataObject[dataMembersTitle[i]] = ((dataObject[dataMembers[i]]).replace(/,/gi, "")).replace(/'/gi, "");
                }
                else if (dataMembers[i] === "Description") {

                    downloadDataObject[dataMembersTitle[i]] = ((dataObject[dataMembers[i]]).replace(/,/gi, "")).replace(/'/gi, "");
                }
                else {

                    downloadDataObject[dataMembersTitle[i]] = dataObject[dataMembers[i]];
                }
            }

            return downloadDataObject;
        };

        function downloadRecords(fileName, dataRecords, dataHeader, dataMembers, dataMembersTitle) {

            try {

                const a = document.createElement("a");
                document.body.appendChild(a);
                a.style = "display: none";

                var data = [];
                data.push(dataHeader + '\n');

                for (var i = 0; i < dataRecords.length; i++) {

                    var newDataValuesObject = getDataMembersObject(ko.toJS(dataRecords[i]), dataMembers, dataMembersTitle);
                    data.push(Object.values(newDataValuesObject).join(',') + '\n');
                }

                const blob = new Blob(data, { type: "octet/stream" });
                const url = window.URL.createObjectURL(blob);

                a.href = url;
                a.download = fileName;
                a.click();

                window.URL.revokeObjectURL(url);
            }
            catch (e) {

                console.log(e.message);
            }
        };

        function intialize(repository) {

            ko.validation.init({
                insertMessages: false,
                decorateElement: true,
                errorElementClass: 'error'
            });

            ko.validation.rules['required'].message = reformUniCodeString('@KOMessages["Required"]');
            ko.validation.rules['min'].message = reformUniCodeString('@KOMessages["Min"]');
            ko.validation.rules['max'].message = reformUniCodeString('@KOMessages["Max"]');
            ko.validation.rules['minLength'].message = reformUniCodeString('@KOMessages["MinLength"]');
            ko.validation.rules['maxLength'].message = reformUniCodeString('@KOMessages["MaxLength"]');
            ko.validation.rules['pattern'].message = reformUniCodeString('@KOMessages["Pattern"]');
            ko.validation.rules['step'].message = reformUniCodeString('@KOMessages["Step"]');
            ko.validation.rules['email'].message = reformUniCodeString('@KOMessages["Email"]');
            ko.validation.rules['date'].message = reformUniCodeString('@KOMessages["Date"]');
            ko.validation.rules['dateISO'].message = reformUniCodeString('@KOMessages["DateISO"]');
            ko.validation.rules['number'].message = reformUniCodeString('@KOMessages["Number"]');
            ko.validation.rules['digit'].message = reformUniCodeString('@KOMessages["Digit"]');
            ko.validation.rules['phoneUS'].message = reformUniCodeString('@KOMessages["PhoneUS"]');
            ko.validation.rules['equal'].message = reformUniCodeString('@KOMessages["Equal"]');
            ko.validation.rules['notEqual'].message = reformUniCodeString('@KOMessages["NotEqual"]');

            ko.validation.registerExtenders();

            repository.clean();
            repository.add(new LocaleMessage("form.new.text", reformUniCodeString('@FormMessages["New"]')));
            repository.add(new LocaleMessage("form.edit.text", reformUniCodeString('@FormMessages["Edit"]')));
            repository.add(new LocaleMessage("form.noRecord.text", reformUniCodeString('@FormMessages["NoRecord"]')));
            repository.add(new LocaleMessage("form.found.text", reformUniCodeString('@FormMessages["Found"]')));
            repository.add(new LocaleMessage("form.records.text", reformUniCodeString('@FormMessages["Records"]')));
            repository.add(new LocaleMessage("form.saved.text", reformUniCodeString('@FormMessages["Saved"]')));
            repository.add(new LocaleMessage("form.failed.text", reformUniCodeString('@FormMessages["Failed"]')));
            repository.add(new LocaleMessage("form.displayingPage.text", reformUniCodeString('@FormMessages["DisplayingPage"]')));
            repository.add(new LocaleMessage("form.of.text", reformUniCodeString('@FormMessages["Of"]')));
            repository.add(new LocaleMessage("form.totalPages.text", reformUniCodeString('@FormMessages["TotalPages"]')));
            repository.add(new LocaleMessage("form.ok.text", reformUniCodeString('@FormMessages["Ok"]')));
            repository.add(new LocaleMessage("standard.alertSure.text", reformUniCodeString('@StandardMessages["AlertSure"]')));
            repository.add(new LocaleMessage("standard.processing.text", reformUniCodeString('@StandardMessages["Processing"]')));
            repository.add(new LocaleMessage("standard.err.text", reformUniCodeString('@StandardMessages["Err"]')));
            repository.add(new LocaleMessage("standard.ok.text", reformUniCodeString('@StandardMessages["Ok"]')));
            repository.add(new LocaleMessage("standard.listloadok.text", reformUniCodeString('@StandardMessages["ListLoadOk"]')));
            repository.add(new LocaleMessage("standard.listloaderr.text", reformUniCodeString('@StandardMessages["ListLoadErr"]')));

            return repository;
        }
    </script>

    @if (IsSectionDefined("Scripts"))
    {
        @RenderSection("Scripts", required: false)
    }
</body>
</html>
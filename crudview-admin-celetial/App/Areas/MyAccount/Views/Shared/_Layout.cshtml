@using Microsoft.AspNetCore.Http;
@using Microsoft.Extensions.Options;
@using Microsoft.Extensions.Localization;
@using SharedLibrary.Core.Resources.Global;
@using Microsoft.AspNetCore.Hosting;
@using Microsoft.AspNetCore.Mvc;
@using System.Globalization;
@using Microsoft.AspNetCore.Identity;
@using Application.Core.Models;

@inject IOptions<Application.Core.Models.Configuration.ApplicationSettings> ApplicationSettings
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

@inject IHostingEnvironment ENV
@inject UserManager<ApplicationUser> UserManager

@inject IStringLocalizer<FormMessages> FormMessages
@inject IStringLocalizer<StandardMessages> StandardMessages
@inject IStringLocalizer<KOMessages> KOMessages
@inject IStringLocalizer<ValidationMessages> ValidationMessages

@{
    Layout = null;
    var sidebarClass = "";

    if (CultureInfo.CurrentCulture.TextInfo.IsRightToLeft)
    {
        sidebarClass = "rtl sidebar-icon-only";
    }
    else
    {
        sidebarClass = "sidebar-icon-only";
    }
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="Shams Zia">

    <link rel="icon" href="@Url.Content("~/favicon16.png")">

    <link href="~/fonts/fontawesome-webfont.eot" />
    <link href="~/fonts/fontawesome-webfont.svg" />
    <link href="~/fonts/fontawesome-webfont.ttf" />
    <link href="~/fonts/fontawesome-webfont.woff" />
    <link href="~/fonts/fontawesome-webfont.woff2" />
    <link href="~/fonts/glyphicons-halflings-regular.eot" />
    <link href="~/fonts/glyphicons-halflings-regular.svg" />
    <link href="~/fonts/glyphicons-halflings-regular.ttf" />
    <link href="~/fonts/glyphicons-halflings-regular.woff" />
    <link href="~/fonts/glyphicons-halflings-regular.woff2" />

    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Playfair+Display:400,700&subset=latin,cyrillic">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Alegreya+Sans:400,700&subset=latin,vietnamese,latin-ext">

    <link rel="stylesheet" href="~/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/bootstrap-grid.css" />
    <link rel="stylesheet" href="~/css/bootstrap-grid-fix.css" />
    <link rel="stylesheet" href="~/lib/c3/c3.css" />
    <link rel="stylesheet" href="~/css/jquery-ui.min.css" />
    <link rel="stylesheet" href="~/css/jquery-ui.structure.min.css" />
    <link rel="stylesheet" href="~/css/jquery-ui.theme.min.css" />

    <link rel="stylesheet" href="~/css/extensions/font-awesome.min.css" />
    <link rel="stylesheet" href="~/css/extensions/datepicker3.css" />

    <link rel="stylesheet" href="~/css/extensions/sidebar/font/typicons.css">
    <link rel="stylesheet" href="~/css/extensions/sidebar/css/vendor.bundle.base.css">
    <link rel="stylesheet" href="~/css/extensions/sidebar/style.css">

    <link rel="stylesheet" href="~/css/extensions/native-carousel-sidebar.css" />
    <link rel="stylesheet" href="~/css/extensions/native-styles-sidebar.css" />

    <script type="text/javascript" src="~/lib/respond.min.js"></script>
    <script type="text/javascript" src="~/lib/modernizr-2.8.3.js"></script>

    @if (IsSectionDefined("Header"))
    {
        @RenderSection("Header", required: false)
    }
    else
    {
        <title></title>
    }

</head>
<body dir="@Context.Session.GetString("bodyDirection")" class="@sidebarClass">

    @if (IsSectionDefined("Authorization"))
    {
        @RenderSection("Authorization", required: false)
    }
    else
    {
        @Html.AntiForgeryToken()
    }
    
    @{
        string[] rolesArray = null;

        if (User.Identity.IsAuthenticated)
        {
            ApplicationUser user = await UserManager.FindByNameAsync(User.Identity.Name);
            rolesArray = (await UserManager.GetRolesAsync(user)).ToArray<string>();
        }

        <div class="container-scroller">

            @Html.Partial("_Header")

            <div class="container-fluid page-body-wrapper">
                <nav class="sidebar sidebar-offcanvas" id="sidebar">
                    <ul class="nav">
                        @Html.Raw((WindnTrees.Controls.Standard.Bootstrap.Navbar.NavigationComposer.composeFromJson(new string[] { System.IO.Path.Combine(new string[] { ENV.ContentRootPath, "navigations", "navigation-myaccount.json" }) }, User.Identity.Name, rolesArray, null, "4.0").getItems()[0]).generateHtml(rolesArray))
                    </ul>
                </nav>

                <div class="main-panel">
                    @if (IsSectionDefined("ContentHeader"))
                    {
                        @RenderSection("ContentHeader", required: false)
                    }

                    <div class="content-wrapper">

                        <div class="h3 desktop">
                            @LocaleResources.Core.Views.Dashboard.Index.GoodMorning <b>@User.Identity.Name</b>
                        </div>
                        
                        @if (IsSectionDefined("PageTitle"))
                        {
                            @RenderSection("PageTitle", required: false)
                        }
                        else
                        {
                            <h3 class="welcome-sub-text">@LocaleResources.Core.Views.Dashboard.Index.DashboardSummary</h3>
                        }

                        <div class="container-fluid pt-2 pl-0 pr-0">
                            @RenderBody()
                        </div>

                    </div>

                    @if (IsSectionDefined("ContentFooter"))
                    {
                        @RenderSection("ContentFooter", required: false)
                    }
                    else
                    {
                        @Html.Partial("_Footer")
                    }
                </div>
            </div>
        </div>
    }

    @Html.Partial("_Copyright")

    <!-- JAVASCRIPTS -->
    <script src="~/lib-ext-sidebar/vendor.bundle.base.js"></script>
    <script src="~/lib/jquery.form/jquery.form.js" type="text/javascript"></script>
    <script src="~/lib/jquery.ui/jquery-ui-1.12.1.min.js" type="text/javascript"></script>

    <script src="~/lib-ext-sidebar/off-canvas.js"></script>
    <script src="~/lib-ext-sidebar/hoverable-collapse.js"></script>
    <script src="~/lib-ext-sidebar/template.js"></script>
    <script src="~/lib-ext-sidebar/settings.js"></script>
    <script src="~/lib-ext-sidebar/todolist.js"></script>
    <script src="~/lib-ext-sidebar/progressbar.min.js"></script>
    <script src="~/lib-ext-sidebar/Chart.min.js"></script>

    <script src="~/lib/datejs.js" type="text/javascript"></script>
    <script src="~/lib/bootstrap4/umd/popper.min.js" type="text/javascript"></script>
    <script src="~/lib/bootstrap4/umd/popper-utils.min.js" type="text/javascript"></script>

    <script src="~/lib/c3/c3.min.js" type="text/javascript"></script>
    <script src="~/lib/d3/d3.min.js" type="text/javascript"></script>

    <script src="~/lib/underscore.js" type="text/javascript"></script>
    <script src="~/lib/moment.min.js" type="text/javascript"></script>

    <script src="~/lib/bootstrap4/bootstrap-datepicker.js" type="text/javascript"></script>
    <script src="~/lib/bootstrap4/bootstrap-timepicker.js" type="text/javascript"></script>

    <script src="~/lib/knockoutjs/knockout-3.4.2.js" type="text/javascript"></script>
    <script src="~/lib/knockoutjs.validation/knockout.validation.min.js" type="text/javascript"></script>
    <script src="~/lib/windntrees-135.min.js" type="text/javascript"></script>

    <script type="text/javascript">

        function reformUniCodeString(options)
        {
            var instance = this; options = options !== null && options !== undefined ? options : {};

            instance.formatString = function (value) {
                if (value.startsWith("&#x")) {
                    var formattedString = value;
                    formattedString = formattedString.replace(/ /gi, "&#x020;");
                    formattedString = formattedString.replace(/&#/gi, "0");
                    formattedString = formattedString.replace(/;/gi, ",");
                    formattedString = formattedString.substr(0, formattedString.length - 1);
                    var uniCodeStrings = formattedString.split(",");
                    var uniCodes = [];
                    for (var i = 0; i < uniCodeStrings.length; i++) {
                        uniCodes.push(parseInt(uniCodeStrings[i]))
                    }
                    formattedString = String.fromCharCode.apply(this, uniCodes);
                    return formattedString
                }
                return value
            };

            if (options.StringType !== null && options.StringType !== undefined)
            {
                if (options.StringType === "&#;")
                {
                    return instance.formatString(options.value)
                }
            }
            else {
                return instance.formatString(options)
            }
        };

        function intialize(repository) {

            ko.validation.init({
                insertMessages: false,
                decorateElement: true,
                errorElementClass: 'error'
            });

            ko.validation.rules['required'].message = reformUniCodeString('@KOMessages["Required"]');
            ko.validation.rules['min'].message = reformUniCodeString('@KOMessages["Min"]');
            ko.validation.rules['max'].message = reformUniCodeString('@KOMessages["Max"]');
            ko.validation.rules['minLength'].message = reformUniCodeString('@KOMessages["MinLength"]');
            ko.validation.rules['maxLength'].message = reformUniCodeString('@KOMessages["MaxLength"]');
            ko.validation.rules['pattern'].message = reformUniCodeString('@KOMessages["Pattern"]');
            ko.validation.rules['step'].message = reformUniCodeString('@KOMessages["Step"]');
            ko.validation.rules['email'].message = reformUniCodeString('@KOMessages["Email"]');
            ko.validation.rules['date'].message = reformUniCodeString('@KOMessages["Date"]');
            ko.validation.rules['dateISO'].message = reformUniCodeString('@KOMessages["DateISO"]');
            ko.validation.rules['number'].message = reformUniCodeString('@KOMessages["Number"]');
            ko.validation.rules['digit'].message = reformUniCodeString('@KOMessages["Digit"]');
            ko.validation.rules['phoneUS'].message = reformUniCodeString('@KOMessages["PhoneUS"]');
            ko.validation.rules['equal'].message = reformUniCodeString('@KOMessages["Equal"]');
            ko.validation.rules['notEqual'].message = reformUniCodeString('@KOMessages["NotEqual"]');

            ko.validation.registerExtenders();

            repository.clean();
            repository.add(new LocaleMessage("form.new.text", reformUniCodeString('@FormMessages["New"]')));
            repository.add(new LocaleMessage("form.edit.text", reformUniCodeString('@FormMessages["Edit"]')));
            repository.add(new LocaleMessage("form.noRecord.text", reformUniCodeString('@FormMessages["NoRecord"]')));
            repository.add(new LocaleMessage("form.found.text", reformUniCodeString('@FormMessages["Found"]')));
            repository.add(new LocaleMessage("form.records.text", reformUniCodeString('@FormMessages["Records"]')));
            repository.add(new LocaleMessage("form.saved.text", reformUniCodeString('@FormMessages["Saved"]')));
            repository.add(new LocaleMessage("form.failed.text", reformUniCodeString('@FormMessages["Failed"]')));
            repository.add(new LocaleMessage("form.displayingPage.text", reformUniCodeString('@FormMessages["DisplayingPage"]')));
            repository.add(new LocaleMessage("form.of.text", reformUniCodeString('@FormMessages["Of"]')));
            repository.add(new LocaleMessage("form.totalPages.text", reformUniCodeString('@FormMessages["TotalPages"]')));
            repository.add(new LocaleMessage("form.ok.text", reformUniCodeString('@FormMessages["Ok"]')));
            repository.add(new LocaleMessage("standard.alertSure.text", reformUniCodeString('@StandardMessages["AlertSure"]')));
            repository.add(new LocaleMessage("standard.processing.text", reformUniCodeString('@StandardMessages["Processing"]')));
            repository.add(new LocaleMessage("standard.err.text", reformUniCodeString('@StandardMessages["Err"]')));
            repository.add(new LocaleMessage("standard.ok.text", reformUniCodeString('@StandardMessages["Ok"]')));
            repository.add(new LocaleMessage("standard.listloadok.text", reformUniCodeString('@StandardMessages["ListLoadOk"]')));
            repository.add(new LocaleMessage("standard.listloaderr.text", reformUniCodeString('@StandardMessages["ListLoadErr"]')));

            return repository;
        };

        $(function () {

            if ((document.getElementsByTagName("body")[0]).getAttribute("dir") === "rtl") {

                var my_account_menu = document.getElementById("my-account-menu");
                if (my_account_menu !== null && my_account_menu !== undefined) {

                    my_account_menu.setAttribute("class", "dropdown-menu");
                }
            }
        });
    </script>

    @if (IsSectionDefined("Scripts"))
    {
        @RenderSection("Scripts", required: false)
    }
</body>
</html>